<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- log4jdbc-log4j2 -->
    <!-- 
    	1. DEBUG (DEBUG, INFO, WARNING, ERROR)
		2. INFO (WARNING, INFO만)
		3. WARN (WARNING, ERROR만) -> 보통 많이 씀
		4. ERROR (ERROR만) -> 보통 많이 씀
     -->
	<logger name="jdbc.sqlonly"        level="DEBUG"/>
    <logger name="jdbc.sqltiming"      level="INFO"/>
    <logger name="jdbc.audit"          level="WARN"/>
    <logger name="jdbc.resultset"      level="ERROR"/>
    <logger name="jdbc.resultsettable" level="ERROR"/>
    <logger name="jdbc.connection"     level="INFO"/>
    
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-4level [%logger.%method:%line]-
				%msg%n</pattern>
		</layout>
	</appender>

	<!-- 
		system.out.println(); -> system단을 건드려서 io를 해서 부하가 많음, 한번 출력하면 끝
		
		commons-loggin : Spring3에서 사용하던 로깅툴
		log -> 기록을 남길 때 사용(sysout이랑 비슷한 기능/확인할 때 사용)
		log4j -> log를 쓰기위해 사용(spring에 기본적으로 추가)
		logback -> log4j보다 성능이 더 우수하여 최근에 많이 사용되고 있음(SLF4J : logback을 사용하기 위한 인터페이스)
		slf4j -> logback을 사용하기위해 만든 결과물
		
		(.xml붙으면 거의 환경설정)
	 -->
	 
	<appender name="LOGFILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>/WEB-INF/logback.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>logback.%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 30일 지난 파일은 삭제한다. -->
			<maxHistory>30</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-4level [%logger.%method:%line]
				- %msg %n</pattern>
		</encoder>
	</appender>

	<!-- 로그의 레벨( 지정된 로그 레벨 이상만 수집 ) : DEBUG < INFO < WARN < ERROR < FATAL -->
	<logger name="myweb" additivity="false">
		<level value="INFO" />
		<appender-ref ref="LOGFILE" />
		<appender-ref ref="CONSOLE" />
	</logger>

	<root>
		<level value="INFO" />
		<appender-ref ref="CONSOLE" />
	</root>

</configuration>